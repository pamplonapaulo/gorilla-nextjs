"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `BigInt` scalar type represents non-fractional signed whole numeric values."""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentNutritionFactsNutritionFactsFiltersInput {
  Carbohydrates: IntFilterInput
  DietaryFiber: IntFilterInput
  EnergeticValue: IntFilterInput
  Portion: IntFilterInput
  Proteins: IntFilterInput
  SaturatedFat: IntFilterInput
  Sodium: IntFilterInput
  TotalFat: IntFilterInput
  TransFat: IntFilterInput
  and: [ComponentNutritionFactsNutritionFactsFiltersInput]
  or: [ComponentNutritionFactsNutritionFactsFiltersInput]
  not: ComponentNutritionFactsNutritionFactsFiltersInput
}

input ComponentNutritionFactsNutritionFactsInput {
  id: ID
  Carbohydrates: Int
  DietaryFiber: Int
  EnergeticValue: Int
  Portion: Int
  Proteins: Int
  SaturatedFat: Int
  Sodium: Int
  TotalFat: Int
  TransFat: Int
}

type ComponentNutritionFactsNutritionFacts {
  id: ID!
  Carbohydrates: Int!
  DietaryFiber: Int!
  EnergeticValue: Int!
  Portion: Int!
  Proteins: Int!
  SaturatedFat: Int!
  Sodium: Int!
  TotalFat: Int!
  TransFat: Int!
}

input ComponentOrderAddressFiltersInput {
  logradouro: StringFilterInput
  numero: StringFilterInput
  complemento: StringFilterInput
  bairro: StringFilterInput
  municipio: StringFilterInput
  uf: StringFilterInput
  cep: StringFilterInput
  nome: StringFilterInput
  and: [ComponentOrderAddressFiltersInput]
  or: [ComponentOrderAddressFiltersInput]
  not: ComponentOrderAddressFiltersInput
}

input ComponentOrderAddressInput {
  id: ID
  logradouro: String
  numero: String
  complemento: String
  bairro: String
  municipio: String
  uf: String
  cep: String
  nome: String
}

type ComponentOrderAddress {
  id: ID!
  logradouro: String!
  numero: String
  complemento: String
  bairro: String
  municipio: String!
  uf: String!
  cep: String!
  nome: String!
}

type ComponentOrderDeactivations {
  id: ID!
  byCustomer: Boolean
  byGorilla: Boolean
  byTimeOut: Boolean
}

input ComponentOrderDeliveryFiltersInput {
  fee: StringFilterInput
  company: StringFilterInput
  packingDetails: JSONFilterInput
  expectedTravelingDays: IntFilterInput
  expectedDispatchDays: ComponentOrderExpectedDispatchDaysFiltersInput
  expectedArrivalDays: ComponentOrderExpectedArrivalDaysFiltersInput
  and: [ComponentOrderDeliveryFiltersInput]
  or: [ComponentOrderDeliveryFiltersInput]
  not: ComponentOrderDeliveryFiltersInput
}

input ComponentOrderDeliveryInput {
  id: ID
  fee: String
  company: String
  packingDetails: JSON
  expectedTravelingDays: Int
  expectedDispatchDays: [ComponentOrderExpectedDispatchDaysInput]
  expectedArrivalDays: [ComponentOrderExpectedArrivalDaysInput]
}

type ComponentOrderDelivery {
  id: ID!
  fee: String!
  company: String!
  packingDetails: JSON
  expectedTravelingDays: Int
  expectedDispatchDays(filters: ComponentOrderExpectedDispatchDaysFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrderExpectedDispatchDays]!
  expectedArrivalDays(filters: ComponentOrderExpectedArrivalDaysFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrderExpectedArrivalDays]!
}

type ComponentOrderDispatches {
  id: ID!
  expected: Int
  accomplished: Int
}

input ComponentOrderExpectedArrivalDaysFiltersInput {
  hasArrived: BooleanFilterInput
  date: DateFilterInput
  and: [ComponentOrderExpectedArrivalDaysFiltersInput]
  or: [ComponentOrderExpectedArrivalDaysFiltersInput]
  not: ComponentOrderExpectedArrivalDaysFiltersInput
}

input ComponentOrderExpectedArrivalDaysInput {
  id: ID
  hasArrived: Boolean
  date: Date
}

type ComponentOrderExpectedArrivalDays {
  id: ID!
  hasArrived: Boolean
  date: Date
}

input ComponentOrderExpectedDispatchDaysFiltersInput {
  isDispatched: BooleanFilterInput
  date: DateFilterInput
  and: [ComponentOrderExpectedDispatchDaysFiltersInput]
  or: [ComponentOrderExpectedDispatchDaysFiltersInput]
  not: ComponentOrderExpectedDispatchDaysFiltersInput
}

input ComponentOrderExpectedDispatchDaysInput {
  id: ID
  isDispatched: Boolean
  date: Date
}

type ComponentOrderExpectedDispatchDays {
  id: ID!
  isDispatched: Boolean
  date: Date
}

input ComponentOrderExpectedPaymentsFiltersInput {
  monthsMultiplier: IntFilterInput
  finalValue: LongFilterInput
  absoluteDiscountApplied: LongFilterInput
  contentCostBeforeDiscount: LongFilterInput
  finalValueWithCoupon: LongFilterInput
  absoluteCouponDiscountApplied: LongFilterInput
  payments: PaymentFiltersInput
  and: [ComponentOrderExpectedPaymentsFiltersInput]
  or: [ComponentOrderExpectedPaymentsFiltersInput]
  not: ComponentOrderExpectedPaymentsFiltersInput
}

input ComponentOrderExpectedPaymentsInput {
  id: ID
  monthsMultiplier: Int
  finalValue: Long
  absoluteDiscountApplied: Long
  contentCostBeforeDiscount: Long
  finalValueWithCoupon: Long
  absoluteCouponDiscountApplied: Long
  payments: [ID]
}

type ComponentOrderExpectedPayments {
  id: ID!
  monthsMultiplier: Int
  finalValue: Long!
  absoluteDiscountApplied: Long!
  contentCostBeforeDiscount: Long!
  finalValueWithCoupon: Long
  absoluteCouponDiscountApplied: Long
  payments(filters: PaymentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PaymentRelationResponseCollection
}

input ComponentPackBenefitsFiltersInput {
  benefits: BenefitFiltersInput
  and: [ComponentPackBenefitsFiltersInput]
  or: [ComponentPackBenefitsFiltersInput]
  not: ComponentPackBenefitsFiltersInput
}

input ComponentPackBenefitsInput {
  id: ID
  benefits: [ID]
}

type ComponentPackBenefits {
  id: ID!
  benefits(filters: BenefitFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): BenefitRelationResponseCollection
}

input ComponentPackItemFiltersInput {
  Quantity: IntFilterInput
  product: ProductFiltersInput
  and: [ComponentPackItemFiltersInput]
  or: [ComponentPackItemFiltersInput]
  not: ComponentPackItemFiltersInput
}

input ComponentPackItemInput {
  id: ID
  Quantity: Int
  product: ID
}

type ComponentPackItem {
  id: ID!
  Quantity: Int!
  product: ProductEntityResponse
}

input ComponentPricePricesFiltersInput {
  mensal: ComponentPricesMensalFiltersInput
  trimestral: ComponentPricesTrimestralFiltersInput
  semestral: ComponentPricesSemestralFiltersInput
  anual: ComponentPricesAnualFiltersInput
  and: [ComponentPricePricesFiltersInput]
  or: [ComponentPricePricesFiltersInput]
  not: ComponentPricePricesFiltersInput
}

input ComponentPricePricesInput {
  id: ID
  mensal: ComponentPricesMensalInput
  trimestral: ComponentPricesTrimestralInput
  semestral: ComponentPricesSemestralInput
  anual: ComponentPricesAnualInput
}

type ComponentPricePrices {
  id: ID!
  mensal: ComponentPricesMensal!
  trimestral: ComponentPricesTrimestral!
  semestral: ComponentPricesSemestral!
  anual: ComponentPricesAnual!
}

input ComponentPricesAnualFiltersInput {
  centavos: LongFilterInput
  priceId: StringFilterInput
  and: [ComponentPricesAnualFiltersInput]
  or: [ComponentPricesAnualFiltersInput]
  not: ComponentPricesAnualFiltersInput
}

input ComponentPricesAnualInput {
  id: ID
  centavos: Long
  priceId: String
}

type ComponentPricesAnual {
  id: ID!
  centavos: Long!
  priceId: String!
}

input ComponentPricesMensalFiltersInput {
  centavos: LongFilterInput
  priceId: StringFilterInput
  and: [ComponentPricesMensalFiltersInput]
  or: [ComponentPricesMensalFiltersInput]
  not: ComponentPricesMensalFiltersInput
}

input ComponentPricesMensalInput {
  id: ID
  centavos: Long
  priceId: String
}

type ComponentPricesMensal {
  id: ID!
  centavos: Long!
  priceId: String!
}

input ComponentPricesSemestralFiltersInput {
  centavos: LongFilterInput
  priceId: StringFilterInput
  and: [ComponentPricesSemestralFiltersInput]
  or: [ComponentPricesSemestralFiltersInput]
  not: ComponentPricesSemestralFiltersInput
}

input ComponentPricesSemestralInput {
  id: ID
  centavos: Long
  priceId: String
}

type ComponentPricesSemestral {
  id: ID!
  centavos: Long!
  priceId: String!
}

input ComponentPricesTrimestralFiltersInput {
  centavos: LongFilterInput
  priceId: StringFilterInput
  and: [ComponentPricesTrimestralFiltersInput]
  or: [ComponentPricesTrimestralFiltersInput]
  not: ComponentPricesTrimestralFiltersInput
}

input ComponentPricesTrimestralInput {
  id: ID
  centavos: Long
  priceId: String
}

type ComponentPricesTrimestral {
  id: ID!
  centavos: Long!
  priceId: String!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  orders: OrderFiltersInput
  postCode: StringFilterInput
  phone: StringFilterInput
  addressNumber: StringFilterInput
  addressComplement: StringFilterInput
  stripe_customer: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  orders: [ID]
  postCode: String
  phone: String
  addressNumber: String
  addressComplement: String
  stripe_customer: String
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  orders(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderRelationResponseCollection
  phone: String!
  addressNumber: String
  addressComplement: String
  stripe_customer: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input BenefitFiltersInput {
  id: IDFilterInput
  benefit: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BenefitFiltersInput]
  or: [BenefitFiltersInput]
  not: BenefitFiltersInput
}

input BenefitInput {
  benefit: String
  publishedAt: DateTime
}

type Benefit {
  benefit: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BenefitEntity {
  id: ID
  attributes: Benefit
}

type BenefitEntityResponse {
  data: BenefitEntity
}

type BenefitEntityResponseCollection {
  data: [BenefitEntity!]!
  meta: ResponseCollectionMeta!
}

type BenefitRelationResponseCollection {
  data: [BenefitEntity!]!
}

enum ENUM_COUPON_TYPE {
  percentage
  absoluteValue
}

input CouponFiltersInput {
  id: IDFilterInput
  isActive: BooleanFilterInput
  expiration: DateFilterInput
  notTaken: IntFilterInput
  type: StringFilterInput
  name: StringFilterInput
  discount: FloatFilterInput
  takenBeforePayment: IntFilterInput
  takenAfterPayment: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CouponFiltersInput]
  or: [CouponFiltersInput]
  not: CouponFiltersInput
}

input CouponInput {
  isActive: Boolean
  expiration: Date
  notTaken: Int
  type: ENUM_COUPON_TYPE
  name: String
  discount: Float
  takenBeforePayment: Int
  takenAfterPayment: Int
}

type Coupon {
  isActive: Boolean
  expiration: Date
  notTaken: Int
  type: ENUM_COUPON_TYPE!
  name: String!
  discount: Float!
  takenBeforePayment: Int
  takenAfterPayment: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type CouponEntity {
  id: ID
  attributes: Coupon
}

type CouponEntityResponse {
  data: CouponEntity
}

type CouponEntityResponseCollection {
  data: [CouponEntity!]!
  meta: ResponseCollectionMeta!
}

input DispatchInput {
  Day1: String
  Day2: String
  SafetyTimeSpan: Int
}

type Dispatch {
  Day1: String
  Day2: String
  SafetyTimeSpan: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DispatchEntity {
  id: ID
  attributes: Dispatch
}

type DispatchEntityResponse {
  data: DispatchEntity
}

input FreeDeliveryInput {
  MinimumTicket: Int
}

type FreeDelivery {
  MinimumTicket: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

type FreeDeliveryEntity {
  id: ID
  attributes: FreeDelivery
}

type FreeDeliveryEntityResponse {
  data: FreeDeliveryEntity
}

input MelhorEnvioInput {
  client_id: String
  client_secret: String
  authorization_code: String
  redirect_uri: String
  access_token: String
  refresh_token: String
}

type MelhorEnvio {
  client_id: String
  client_secret: String
  authorization_code: String
  redirect_uri: String
  access_token: String
  refresh_token: String
  createdAt: DateTime
  updatedAt: DateTime
}

type MelhorEnvioEntity {
  id: ID
  attributes: MelhorEnvio
}

type MelhorEnvioEntityResponse {
  data: MelhorEnvioEntity
}

input MinimumPackValueInput {
  MinimumValue: Long
}

type MinimumPackValue {
  MinimumValue: Long!
  createdAt: DateTime
  updatedAt: DateTime
}

type MinimumPackValueEntity {
  id: ID
  attributes: MinimumPackValue
}

type MinimumPackValueEntityResponse {
  data: MinimumPackValueEntity
}

enum ENUM_ORDER_DEACTIVATIONAUTHOR {
  admin
  customer
  timeOut
}

input OrderFiltersInput {
  id: IDFilterInput
  period: PeriodFiltersInput
  snack: ComponentPackItemFiltersInput
  pack: PackFiltersInput
  deliveries: ComponentOrderDeliveryFiltersInput
  address: ComponentOrderAddressFiltersInput
  coupon: CouponFiltersInput
  expectedPayments: ComponentOrderExpectedPaymentsFiltersInput
  isConfirmed: BooleanFilterInput
  title: StringFilterInput
  deactivated: BooleanFilterInput
  deactivationAuthor: StringFilterInput
  user: UsersPermissionsUserFiltersInput
  paymentIntent: StringFilterInput
  cardBrand: StringFilterInput
  cardLast4digits: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [OrderFiltersInput]
  or: [OrderFiltersInput]
  not: OrderFiltersInput
}

input OrderInput {
  period: ID
  snack: [ComponentPackItemInput]
  pack: ID
  deliveries: [ComponentOrderDeliveryInput]
  address: ComponentOrderAddressInput
  coupon: ID
  expectedPayments: [ComponentOrderExpectedPaymentsInput]
  isConfirmed: Boolean
  title: String
  deactivated: Boolean
  deactivationAuthor: ENUM_ORDER_DEACTIVATIONAUTHOR
  user: ID
  paymentIntent: String
  cardBrand: String
  cardLast4digits: String
}

type Order {
  period: PeriodEntityResponse
  snack(filters: ComponentPackItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPackItem]!
  pack: PackEntityResponse
  deliveries(filters: ComponentOrderDeliveryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrderDelivery]!
  address: ComponentOrderAddress!
  coupon: CouponEntityResponse
  expectedPayments(filters: ComponentOrderExpectedPaymentsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrderExpectedPayments]!
  isConfirmed: Boolean
  title: String!
  deactivated: Boolean
  deactivationAuthor: ENUM_ORDER_DEACTIVATIONAUTHOR
  user: UsersPermissionsUserEntityResponse
  paymentIntent: String!
  cardBrand: String
  cardLast4digits: String
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderEntity {
  id: ID
  attributes: Order
}

type OrderEntityResponse {
  data: OrderEntity
}

type OrderEntityResponseCollection {
  data: [OrderEntity!]!
  meta: ResponseCollectionMeta!
}

type OrderRelationResponseCollection {
  data: [OrderEntity!]!
}

input PackFiltersInput {
  id: IDFilterInput
  Name: StringFilterInput
  Description: StringFilterInput
  ExtraDiscount: FloatFilterInput
  Benefits: ComponentPackBenefitsFiltersInput
  Item: ComponentPackItemFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PackFiltersInput]
  or: [PackFiltersInput]
  not: PackFiltersInput
}

input PackInput {
  Name: String
  Description: String
  ExtraDiscount: Float
  Benefits: [ComponentPackBenefitsInput]
  Item: [ComponentPackItemInput]
  publishedAt: DateTime
}

type Pack {
  Name: String!
  Description: String
  ExtraDiscount: Float
  Benefits(filters: ComponentPackBenefitsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPackBenefits!]!
  Item(filters: ComponentPackItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPackItem]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PackEntity {
  id: ID
  attributes: Pack
}

type PackEntityResponse {
  data: PackEntity
}

type PackEntityResponseCollection {
  data: [PackEntity!]!
  meta: ResponseCollectionMeta!
}

input PaymentFiltersInput {
  id: IDFilterInput
  users_permissions_user: UsersPermissionsUserFiltersInput
  order: OrderFiltersInput
  date: DateFilterInput
  value: LongFilterInput
  stripe: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [PaymentFiltersInput]
  or: [PaymentFiltersInput]
  not: PaymentFiltersInput
}

input PaymentInput {
  users_permissions_user: ID
  order: ID
  date: Date
  value: Long
  stripe: JSON
}

type Payment {
  users_permissions_user: UsersPermissionsUserEntityResponse
  order: OrderEntityResponse
  date: Date!
  value: Long!
  stripe: JSON!
  createdAt: DateTime
  updatedAt: DateTime
}

type PaymentEntity {
  id: ID
  attributes: Payment
}

type PaymentEntityResponse {
  data: PaymentEntity
}

type PaymentEntityResponseCollection {
  data: [PaymentEntity!]!
  meta: ResponseCollectionMeta!
}

type PaymentRelationResponseCollection {
  data: [PaymentEntity!]!
}

input PeriodFiltersInput {
  id: IDFilterInput
  Type: StringFilterInput
  Multiplier: IntFilterInput
  Discount: FloatFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [PeriodFiltersInput]
  or: [PeriodFiltersInput]
  not: PeriodFiltersInput
}

input PeriodInput {
  Type: String
  Multiplier: Int
  Discount: Float
}

type Period {
  Type: String!
  Multiplier: Int!
  Discount: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

type PeriodEntity {
  id: ID
  attributes: Period
}

type PeriodEntityResponse {
  data: PeriodEntity
}

type PeriodEntityResponseCollection {
  data: [PeriodEntity!]!
  meta: ResponseCollectionMeta!
}

input ProductFiltersInput {
  id: IDFilterInput
  Name: StringFilterInput
  Weight: IntFilterInput
  Height: IntFilterInput
  Width: IntFilterInput
  Length: IntFilterInput
  NutritionFacts: ComponentNutritionFactsNutritionFactsFiltersInput
  prices: ComponentPricePricesFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: ProductFiltersInput
  locale: StringFilterInput
  and: [ProductFiltersInput]
  or: [ProductFiltersInput]
  not: ProductFiltersInput
}

input ProductInput {
  Name: String
  Image: ID
  Weight: Int
  Height: Int
  Width: Int
  Length: Int
  NutritionFacts: ComponentNutritionFactsNutritionFactsInput
  prices: ComponentPricePricesInput
  publishedAt: DateTime
}

type Product {
  Name: String!
  Image: UploadFileEntityResponse!
  Weight: Int
  Height: Int
  Width: Int
  Length: Int
  NutritionFacts: ComponentNutritionFactsNutritionFacts!
  prices: ComponentPricePrices!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(filters: ProductFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): ProductRelationResponseCollection
  locale: String
}

type ProductEntity {
  id: ID
  attributes: Product
}

type ProductEntityResponse {
  data: ProductEntity
}

type ProductEntityResponseCollection {
  data: [ProductEntity!]!
  meta: ResponseCollectionMeta!
}

type ProductRelationResponseCollection {
  data: [ProductEntity!]!
}

union GenericMorph = ComponentNutritionFactsNutritionFacts | ComponentOrderAddress | ComponentOrderDeactivations | ComponentOrderDelivery | ComponentOrderDispatches | ComponentOrderExpectedArrivalDays | ComponentOrderExpectedDispatchDays | ComponentOrderExpectedPayments | ComponentPackBenefits | ComponentPackItem | ComponentPricePrices | ComponentPricesAnual | ComponentPricesMensal | ComponentPricesSemestral | ComponentPricesTrimestral | UploadFile | UploadFolder | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Benefit | Coupon | Dispatch | FreeDelivery | MelhorEnvio | MinimumPackValue | Order | Pack | Payment | Period | Product

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
  addressComplement: String
  addressNumber: String
  phone: String
  postCode: String
  stripe_customer: String
  updatedAt: String
  order(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderRelationResponseCollection
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  benefit(id: ID): BenefitEntityResponse
  benefits(filters: BenefitFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): BenefitEntityResponseCollection
  coupon(id: ID): CouponEntityResponse
  coupons(filters: CouponFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CouponEntityResponseCollection
  dispatch: DispatchEntityResponse
  freeDelivery: FreeDeliveryEntityResponse
  melhorEnvio: MelhorEnvioEntityResponse
  minimumPackValue: MinimumPackValueEntityResponse
  order(id: ID): OrderEntityResponse
  orders(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderEntityResponseCollection
  pack(id: ID): PackEntityResponse
  packs(filters: PackFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PackEntityResponseCollection
  payment(id: ID): PaymentEntityResponse
  payments(filters: PaymentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PaymentEntityResponseCollection
  period(id: ID): PeriodEntityResponse
  periods(filters: PeriodFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PeriodEntityResponseCollection
  product(id: ID, locale: I18NLocaleCode): ProductEntityResponse
  products(filters: ProductFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE, locale: I18NLocaleCode): ProductEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(id: ID!, data: UploadFolderInput!): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createBenefit(data: BenefitInput!): BenefitEntityResponse
  updateBenefit(id: ID!, data: BenefitInput!): BenefitEntityResponse
  deleteBenefit(id: ID!): BenefitEntityResponse
  createCoupon(data: CouponInput!): CouponEntityResponse
  updateCoupon(id: ID!, data: CouponInput!): CouponEntityResponse
  deleteCoupon(id: ID!): CouponEntityResponse
  updateDispatch(data: DispatchInput!): DispatchEntityResponse
  deleteDispatch: DispatchEntityResponse
  updateFreeDelivery(data: FreeDeliveryInput!): FreeDeliveryEntityResponse
  deleteFreeDelivery: FreeDeliveryEntityResponse
  updateMelhorEnvio(data: MelhorEnvioInput!): MelhorEnvioEntityResponse
  deleteMelhorEnvio: MelhorEnvioEntityResponse
  updateMinimumPackValue(data: MinimumPackValueInput!): MinimumPackValueEntityResponse
  deleteMinimumPackValue: MinimumPackValueEntityResponse
  createOrder(data: OrderInput!): OrderEntityResponse
  updateOrder(id: ID!, data: OrderInput!): OrderEntityResponse
  deleteOrder(id: ID!): OrderEntityResponse
  createPack(data: PackInput!): PackEntityResponse
  updatePack(id: ID!, data: PackInput!): PackEntityResponse
  deletePack(id: ID!): PackEntityResponse
  createPayment(data: PaymentInput!): PaymentEntityResponse
  updatePayment(id: ID!, data: PaymentInput!): PaymentEntityResponse
  deletePayment(id: ID!): PaymentEntityResponse
  createPeriod(data: PeriodInput!): PeriodEntityResponse
  updatePeriod(id: ID!, data: PeriodInput!): PeriodEntityResponse
  deletePeriod(id: ID!): PeriodEntityResponse
  createProduct(data: ProductInput!, locale: I18NLocaleCode): ProductEntityResponse
  updateProduct(id: ID!, data: ProductInput!, locale: I18NLocaleCode): ProductEntityResponse
  deleteProduct(id: ID!, locale: I18NLocaleCode): ProductEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  createProductLocalization(id: ID, data: ProductInput, locale: I18NLocaleCode): ProductEntityResponse
  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  """Reset user password. Confirm with a code (resetToken from forgotPassword)"""
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
